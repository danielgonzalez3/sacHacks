{"ast":null,"code":"var _jsxFileName = \"/home/asura1/fake/quiz-app/final/src/App.js\";\nimport React, { useState } from 'react';\nexport default function App() {\n  //this creates garbage variable i\n  let i; // This initialises a request to the trivia database API\n\n  var xmlhttp = new XMLHttpRequest();\n  const url = \"https://opentdb.com/api.php?amount=50&category=23&difficulty=medium&type=multiple\";\n  var question;\n  var type;\n  var correctAnswer;\n  var incorrect1;\n  var incorrect2;\n  var incorrect3;\n  var jsondata; // This requests the data\n\n  xmlhttp.onreadystatechange = function () {\n    if (this.readyState === 4 && this.status === 200) {\n      jsondata = JSON.parse(this.responseText);\n      getData(jsondata);\n    } else {\n      throw '';\n    }\n  };\n\n  xmlhttp.open(\"GET\", url, true);\n  xmlhttp.send();\n  console.log(jsondata); // This function is used to extract the received data\n\n  function getData(data) {\n    console.log(data); // This is the question:\n\n    question = data.results[0].question;\n    console.log(question);\n    console.log(typeof question); // This is the question type eg. multiple choice\n\n    type = data.results[0].type; // This is the correct answer\n\n    correctAnswer = data.results[0].correct_answer; // These are the three incorrect answers\n\n    incorrect1 = data.results[0].incorrect_answers[0];\n    incorrect2 = data.results[0].incorrect_answers[1];\n    incorrect3 = data.results[0].incorrect_answers[2]; // randomly select answer and other options and place in array\n    // then display elements from array on the buttons\n\n    var randoms = []; // an array to store unique random numbers\n\n    var random; // loop runs four times...\n\n    for (i = 0; i < 4; i++) {\n      // generates a random number between 0 and 3\n      random = Math.floor(Math.random() * 4); // checks if random number already in array...\n\n      while (randoms.includes(random)) {\n        // generates another random number\n        random = Math.floor(Math.random() * 4);\n      } // adds random number to array\n\n\n      randoms.push(random);\n    }\n\n    var options = [];\n    console.log(randoms);\n    console.log('hello world');\n    options[randoms[0]] = correctAnswer;\n    options[randoms[1]] = incorrect1;\n    options[randoms[2]] = incorrect2;\n    options[randoms[3]] = incorrect3;\n    console.log(options);\n  }\n\n  const questions = [{\n    questionText: '',\n    answerOptions: [{\n      answerText: 'New York',\n      isCorrect: false\n    }, {\n      answerText: 'London',\n      isCorrect: false\n    }, {\n      answerText: 'Paris',\n      isCorrect: true\n    }, {\n      answerText: 'Dublin',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'What is the capital of France?',\n    answerOptions: [{\n      answerText: 'New York',\n      isCorrect: false\n    }, {\n      answerText: 'London',\n      isCorrect: false\n    }, {\n      answerText: 'Paris',\n      isCorrect: true\n    }, {\n      answerText: 'Dublin',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'Who is CEO of Tesla?',\n    answerOptions: [{\n      answerText: 'Jeff Bezos',\n      isCorrect: false\n    }, {\n      answerText: 'Elon Musk',\n      isCorrect: true\n    }, {\n      answerText: 'Bill Gates',\n      isCorrect: false\n    }, {\n      answerText: 'Tony Stark',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'The iPhone was created by which company?',\n    answerOptions: [{\n      answerText: 'Apple',\n      isCorrect: true\n    }, {\n      answerText: 'Intel',\n      isCorrect: false\n    }, {\n      answerText: 'Amazon',\n      isCorrect: false\n    }, {\n      answerText: 'Microsoft',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'How many Harry Potter books are there?',\n    answerOptions: [{\n      answerText: '1',\n      isCorrect: false\n    }, {\n      answerText: '4',\n      isCorrect: false\n    }, {\n      answerText: '6',\n      isCorrect: false\n    }, {\n      answerText: '7',\n      isCorrect: true\n    }]\n  }];\n  questions[0].questionText = jsondata.results[0].question;\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const handleAnswerOptionClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, showScore ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, \"You scored \", score, \" out of \", questions.length) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 29\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 25\n    }\n  }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }, questions[currentQuestion].answerOptions.map(answerOption => /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleAnswerOptionClick(answerOption.isCorrect),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 29\n    }\n  }, answerOption.answerText)))));\n}","map":{"version":3,"sources":["/home/asura1/fake/quiz-app/final/src/App.js"],"names":["React","useState","App","i","xmlhttp","XMLHttpRequest","url","question","type","correctAnswer","incorrect1","incorrect2","incorrect3","jsondata","onreadystatechange","readyState","status","JSON","parse","responseText","getData","open","send","console","log","data","results","correct_answer","incorrect_answers","randoms","random","Math","floor","includes","push","options","questions","questionText","answerOptions","answerText","isCorrect","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","handleAnswerOptionClick","nextQuestion","length","map","answerOption"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,eAAe,SAASC,GAAT,GAAe;AAC1B;AACA,MAAIC,CAAJ,CAF0B,CAG1B;;AACA,MAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AACA,QAAMC,GAAG,GAAG,mFAAZ;AACA,MAAIC,QAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,aAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,QAAJ,CAZ0B,CAc9B;;AACIT,EAAAA,OAAO,CAACU,kBAAR,GAA6B,YAAY;AACrC,QAAI,KAAKC,UAAL,KAAoB,CAApB,IAAyB,KAAKC,MAAL,KAAgB,GAA7C,EAAkD;AAC9CH,MAAAA,QAAQ,GAAGI,IAAI,CAACC,KAAL,CAAW,KAAKC,YAAhB,CAAX;AACAC,MAAAA,OAAO,CAACP,QAAD,CAAP;AACH,KAHD,MAGO;AACH,YAAM,EAAN;AACH;AACJ,GAPD;;AAQAT,EAAAA,OAAO,CAACiB,IAAR,CAAa,KAAb,EAAoBf,GAApB,EAAyB,IAAzB;AACAF,EAAAA,OAAO,CAACkB,IAAR;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ,EAzB0B,CA2B1B;;AACA,WAASO,OAAT,CAAiBK,IAAjB,EAAuB;AACnBF,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ,EADmB,CAEnB;;AACAlB,IAAAA,QAAQ,GAAGkB,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBnB,QAA3B;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAZ;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAQjB,QAApB,EALmB,CAMnB;;AACAC,IAAAA,IAAI,GAAGiB,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBlB,IAAvB,CAPmB,CAQnB;;AACAC,IAAAA,aAAa,GAAGgB,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBC,cAAhC,CATmB,CAUnB;;AACAjB,IAAAA,UAAU,GAAGe,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBE,iBAAhB,CAAkC,CAAlC,CAAb;AACAjB,IAAAA,UAAU,GAAGc,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBE,iBAAhB,CAAkC,CAAlC,CAAb;AACAhB,IAAAA,UAAU,GAAGa,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBE,iBAAhB,CAAkC,CAAlC,CAAb,CAbmB,CAenB;AACA;;AAEA,QAAIC,OAAO,GAAG,EAAd,CAlBmB,CAkBD;;AAClB,QAAIC,MAAJ,CAnBmB,CAqBnB;;AACA,SAAK3B,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACpB;AACA2B,MAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgB,CAA3B,CAAT,CAFoB,CAGpB;;AACA,aAAOD,OAAO,CAACI,QAAR,CAAiBH,MAAjB,CAAP,EAAiC;AAC7B;AACAA,QAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgB,CAA3B,CAAT;AACH,OAPmB,CAQpB;;;AACAD,MAAAA,OAAO,CAACK,IAAR,CAAaJ,MAAb;AACH;;AAGD,QAAIK,OAAO,GAAG,EAAd;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAYK,OAAZ;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAW,IAAAA,OAAO,CAACN,OAAO,CAAC,CAAD,CAAR,CAAP,GAAsBpB,aAAtB;AACA0B,IAAAA,OAAO,CAACN,OAAO,CAAC,CAAD,CAAR,CAAP,GAAsBnB,UAAtB;AACAyB,IAAAA,OAAO,CAACN,OAAO,CAAC,CAAD,CAAR,CAAP,GAAsBlB,UAAtB;AACAwB,IAAAA,OAAO,CAACN,OAAO,CAAC,CAAD,CAAR,CAAP,GAAsBjB,UAAtB;AAEAW,IAAAA,OAAO,CAACC,GAAR,CAAYW,OAAZ;AACH;;AAED,QAAMC,SAAS,GAAG,CACd;AACIC,IAAAA,YAAY,EAAE,EADlB;AAEIC,IAAAA,aAAa,EAAE,CACX;AAACC,MAAAA,UAAU,EAAE,UAAb;AAAyBC,MAAAA,SAAS,EAAE;AAApC,KADW,EAEX;AAACD,MAAAA,UAAU,EAAE,QAAb;AAAuBC,MAAAA,SAAS,EAAE;AAAlC,KAFW,EAGX;AAACD,MAAAA,UAAU,EAAE,OAAb;AAAsBC,MAAAA,SAAS,EAAE;AAAjC,KAHW,EAIX;AAACD,MAAAA,UAAU,EAAE,QAAb;AAAuBC,MAAAA,SAAS,EAAE;AAAlC,KAJW;AAFnB,GADc,EAUd;AACIH,IAAAA,YAAY,EAAE,gCADlB;AAEIC,IAAAA,aAAa,EAAE,CACX;AAACC,MAAAA,UAAU,EAAE,UAAb;AAAyBC,MAAAA,SAAS,EAAE;AAApC,KADW,EAEX;AAACD,MAAAA,UAAU,EAAE,QAAb;AAAuBC,MAAAA,SAAS,EAAE;AAAlC,KAFW,EAGX;AAACD,MAAAA,UAAU,EAAE,OAAb;AAAsBC,MAAAA,SAAS,EAAE;AAAjC,KAHW,EAIX;AAACD,MAAAA,UAAU,EAAE,QAAb;AAAuBC,MAAAA,SAAS,EAAE;AAAlC,KAJW;AAFnB,GAVc,EAmBd;AACIH,IAAAA,YAAY,EAAE,sBADlB;AAEIC,IAAAA,aAAa,EAAE,CACX;AAACC,MAAAA,UAAU,EAAE,YAAb;AAA2BC,MAAAA,SAAS,EAAE;AAAtC,KADW,EAEX;AAACD,MAAAA,UAAU,EAAE,WAAb;AAA0BC,MAAAA,SAAS,EAAE;AAArC,KAFW,EAGX;AAACD,MAAAA,UAAU,EAAE,YAAb;AAA2BC,MAAAA,SAAS,EAAE;AAAtC,KAHW,EAIX;AAACD,MAAAA,UAAU,EAAE,YAAb;AAA2BC,MAAAA,SAAS,EAAE;AAAtC,KAJW;AAFnB,GAnBc,EA4Bd;AACIH,IAAAA,YAAY,EAAE,0CADlB;AAEIC,IAAAA,aAAa,EAAE,CACX;AAACC,MAAAA,UAAU,EAAE,OAAb;AAAsBC,MAAAA,SAAS,EAAE;AAAjC,KADW,EAEX;AAACD,MAAAA,UAAU,EAAE,OAAb;AAAsBC,MAAAA,SAAS,EAAE;AAAjC,KAFW,EAGX;AAACD,MAAAA,UAAU,EAAE,QAAb;AAAuBC,MAAAA,SAAS,EAAE;AAAlC,KAHW,EAIX;AAACD,MAAAA,UAAU,EAAE,WAAb;AAA0BC,MAAAA,SAAS,EAAE;AAArC,KAJW;AAFnB,GA5Bc,EAqCd;AACIH,IAAAA,YAAY,EAAE,wCADlB;AAEIC,IAAAA,aAAa,EAAE,CACX;AAACC,MAAAA,UAAU,EAAE,GAAb;AAAkBC,MAAAA,SAAS,EAAE;AAA7B,KADW,EAEX;AAACD,MAAAA,UAAU,EAAE,GAAb;AAAkBC,MAAAA,SAAS,EAAE;AAA7B,KAFW,EAGX;AAACD,MAAAA,UAAU,EAAE,GAAb;AAAkBC,MAAAA,SAAS,EAAE;AAA7B,KAHW,EAIX;AAACD,MAAAA,UAAU,EAAE,GAAb;AAAkBC,MAAAA,SAAS,EAAE;AAA7B,KAJW;AAFnB,GArCc,CAAlB;AA+CAJ,EAAAA,SAAS,CAAC,CAAD,CAAT,CAAaC,YAAb,GAA4BxB,QAAQ,CAACa,OAAT,CAAiB,CAAjB,EAAoBnB,QAAhD;AAEA,QAAM,CAACkC,eAAD,EAAkBC,kBAAlB,IAAwCzC,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAM,CAAC0C,SAAD,EAAYC,YAAZ,IAA4B3C,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAAC4C,KAAD,EAAQC,QAAR,IAAoB7C,QAAQ,CAAC,CAAD,CAAlC;;AAEA,QAAM8C,uBAAuB,GAAIP,SAAD,IAAe;AAC3C,QAAIA,SAAJ,EAAe;AACXM,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,UAAMG,YAAY,GAAGP,eAAe,GAAG,CAAvC;;AACA,QAAIO,YAAY,GAAGZ,SAAS,CAACa,MAA7B,EAAqC;AACjCP,MAAAA,kBAAkB,CAACM,YAAD,CAAlB;AACH,KAFD,MAEO;AACHJ,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;AACJ,GAXD;;AAYA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,SAAS,gBACN;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACgBE,KADhB,cAC+BT,SAAS,CAACa,MADzC,CADM,gBAKN,uDACI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgBR,eAAe,GAAG,CAAlC,CADJ,OACiDL,SAAS,CAACa,MAD3D,CADJ,eAII;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCb,SAAS,CAACK,eAAD,CAAT,CAA2BJ,YAA3D,CAJJ,CADJ,eAOI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,SAAS,CAACK,eAAD,CAAT,CAA2BH,aAA3B,CAAyCY,GAAzC,CAA8CC,YAAD,iBAC1C;AACI,IAAA,OAAO,EAAE,MAAMJ,uBAAuB,CAACI,YAAY,CAACX,SAAd,CAD1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACqEW,YAAY,CAACZ,UADlF,CADH,CADL,CAPJ,CANR,CADJ;AAwBH","sourcesContent":["import React, {useState} from 'react';\n\nexport default function App() {\n    //this creates garbage variable i\n    let i;\n    // This initialises a request to the trivia database API\n    var xmlhttp = new XMLHttpRequest();\n    const url = \"https://opentdb.com/api.php?amount=50&category=23&difficulty=medium&type=multiple\";\n    var question;\n    var type;\n    var correctAnswer;\n    var incorrect1;\n    var incorrect2;\n    var incorrect3;\n    var jsondata;\n\n// This requests the data\n    xmlhttp.onreadystatechange = function () {\n        if (this.readyState === 4 && this.status === 200) {\n            jsondata = JSON.parse(this.responseText);\n            getData(jsondata);\n        } else {\n            throw '';\n        }\n    };\n    xmlhttp.open(\"GET\", url, true);\n    xmlhttp.send();\n    console.log(jsondata);\n\n    // This function is used to extract the received data\n    function getData(data) {\n        console.log(data)\n        // This is the question:\n        question = data.results[0].question;\n        console.log(question);\n        console.log(typeof (question));\n        // This is the question type eg. multiple choice\n        type = data.results[0].type;\n        // This is the correct answer\n        correctAnswer = data.results[0].correct_answer;\n        // These are the three incorrect answers\n        incorrect1 = data.results[0].incorrect_answers[0];\n        incorrect2 = data.results[0].incorrect_answers[1];\n        incorrect3 = data.results[0].incorrect_answers[2];\n\n        // randomly select answer and other options and place in array\n        // then display elements from array on the buttons\n\n        var randoms = []; // an array to store unique random numbers\n        var random;\n\n        // loop runs four times...\n        for (i = 0; i < 4; i++) {\n            // generates a random number between 0 and 3\n            random = Math.floor(Math.random() * 4);\n            // checks if random number already in array...\n            while (randoms.includes(random)) {\n                // generates another random number\n                random = Math.floor(Math.random() * 4);\n            }\n            // adds random number to array\n            randoms.push(random);\n        }\n\n\n        var options = [];\n        console.log(randoms);\n        console.log('hello world')\n        options[randoms[0]] = correctAnswer;\n        options[randoms[1]] = incorrect1;\n        options[randoms[2]] = incorrect2;\n        options[randoms[3]] = incorrect3;\n\n        console.log(options);\n    }\n\n    const questions = [\n        {\n            questionText: '',\n            answerOptions: [\n                {answerText: 'New York', isCorrect: false},\n                {answerText: 'London', isCorrect: false},\n                {answerText: 'Paris', isCorrect: true},\n                {answerText: 'Dublin', isCorrect: false},\n            ],\n        },\n        {\n            questionText: 'What is the capital of France?',\n            answerOptions: [\n                {answerText: 'New York', isCorrect: false},\n                {answerText: 'London', isCorrect: false},\n                {answerText: 'Paris', isCorrect: true},\n                {answerText: 'Dublin', isCorrect: false},\n            ],\n        },\n        {\n            questionText: 'Who is CEO of Tesla?',\n            answerOptions: [\n                {answerText: 'Jeff Bezos', isCorrect: false},\n                {answerText: 'Elon Musk', isCorrect: true},\n                {answerText: 'Bill Gates', isCorrect: false},\n                {answerText: 'Tony Stark', isCorrect: false},\n            ],\n        },\n        {\n            questionText: 'The iPhone was created by which company?',\n            answerOptions: [\n                {answerText: 'Apple', isCorrect: true},\n                {answerText: 'Intel', isCorrect: false},\n                {answerText: 'Amazon', isCorrect: false},\n                {answerText: 'Microsoft', isCorrect: false},\n            ],\n        },\n        {\n            questionText: 'How many Harry Potter books are there?',\n            answerOptions: [\n                {answerText: '1', isCorrect: false},\n                {answerText: '4', isCorrect: false},\n                {answerText: '6', isCorrect: false},\n                {answerText: '7', isCorrect: true},\n            ],\n        },\n    ];\n    questions[0].questionText = jsondata.results[0].question;\n\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [showScore, setShowScore] = useState(false);\n    const [score, setScore] = useState(0);\n\n    const handleAnswerOptionClick = (isCorrect) => {\n        if (isCorrect) {\n            setScore(score + 1);\n        }\n\n        const nextQuestion = currentQuestion + 1;\n        if (nextQuestion < questions.length) {\n            setCurrentQuestion(nextQuestion);\n        } else {\n            setShowScore(true);\n        }\n    };\n    return (\n        <div className='app'>\n            {showScore ? (\n                <div className='score-section'>\n                    You scored {score} out of {questions.length}\n                </div>\n            ) : (\n                <>\n                    <div className='question-section'>\n                        <div className='question-count'>\n                            <span>Question {currentQuestion + 1}</span>/{questions.length}\n                        </div>\n                        <div className='question-text'>{questions[currentQuestion].questionText}</div>\n                    </div>\n                    <div className='answer-section'>\n                        {questions[currentQuestion].answerOptions.map((answerOption) => (\n                            <button\n                                onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n                        ))}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}