{"ast":null,"code":"var _jsxFileName = \"/home/asura1/fake/quiz-app/final/src/App.js\";\nimport React, { useState } from 'react';\nexport default function App() {\n  const opentdb = require('opentdb-api');\n\n  var questionArray = null;\n  opentdb.getToken().then(newToken => {\n    var options = {\n      amount: 10,\n      category: 'history',\n      difficulty: 'medium',\n      type: 'multiple',\n      token: newToken\n    };\n    questionArray = opentdb.getTrivia(options); //console.log(questionArray);\n    //console.log(typeof(questionArray));\n  });\n  const questions = [{\n    questionText: 'What is the capital of France?',\n    answerOptions: [{\n      answerText: 'New York',\n      isCorrect: false\n    }, {\n      answerText: 'London',\n      isCorrect: false\n    }, {\n      answerText: 'Paris',\n      isCorrect: true\n    }, {\n      answerText: 'Dublin',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'Who is CEO of Tesla?',\n    answerOptions: [{\n      answerText: 'Jeff Bezos',\n      isCorrect: false\n    }, {\n      answerText: 'Elon Musk',\n      isCorrect: true\n    }, {\n      answerText: 'Bill Gates',\n      isCorrect: false\n    }, {\n      answerText: 'Tony Stark',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'The iPhone was created by which company?',\n    answerOptions: [{\n      answerText: 'Apple',\n      isCorrect: true\n    }, {\n      answerText: 'Intel',\n      isCorrect: false\n    }, {\n      answerText: 'Amazon',\n      isCorrect: false\n    }, {\n      answerText: 'Microsoft',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'How many Harry Potter books are there?',\n    answerOptions: [{\n      answerText: '1',\n      isCorrect: false\n    }, {\n      answerText: '4',\n      isCorrect: false\n    }, {\n      answerText: '6',\n      isCorrect: false\n    }, {\n      answerText: '7',\n      isCorrect: true\n    }]\n  }];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const handleAnswerOptionClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, showScore ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"You scored \", score, \" out of \", questions.length) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 29\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, questions[currentQuestion].answerOptions.map(answerOption => /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleAnswerOptionClick(answerOption.isCorrect),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }\n  }, answerOption.answerText)))));\n}","map":{"version":3,"sources":["/home/asura1/fake/quiz-app/final/src/App.js"],"names":["React","useState","App","opentdb","require","questionArray","getToken","then","newToken","options","amount","category","difficulty","type","token","getTrivia","questions","questionText","answerOptions","answerText","isCorrect","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","handleAnswerOptionClick","nextQuestion","length","map","answerOption"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\n\nexport default function App() {\n    const opentdb = require('opentdb-api');\n    var questionArray = null;\n    opentdb.getToken().then(newToken => {\n\n        var options = {\n            amount: 10,\n            category: 'history',\n            difficulty: 'medium',\n            type: 'multiple',\n            token: newToken\n        }\n\n        questionArray = opentdb.getTrivia(options)\n        //console.log(questionArray);\n        //console.log(typeof(questionArray));\n        \n    });\n\n    const questions = [\n        {\n            questionText: 'What is the capital of France?',\n            answerOptions: [\n                {answerText: 'New York', isCorrect: false},\n                {answerText: 'London', isCorrect: false},\n                {answerText: 'Paris', isCorrect: true},\n                {answerText: 'Dublin', isCorrect: false},\n            ],\n        },\n        {\n            questionText: 'Who is CEO of Tesla?',\n            answerOptions: [\n                {answerText: 'Jeff Bezos', isCorrect: false},\n                {answerText: 'Elon Musk', isCorrect: true},\n                {answerText: 'Bill Gates', isCorrect: false},\n                {answerText: 'Tony Stark', isCorrect: false},\n            ],\n        },\n        {\n            questionText: 'The iPhone was created by which company?',\n            answerOptions: [\n                {answerText: 'Apple', isCorrect: true},\n                {answerText: 'Intel', isCorrect: false},\n                {answerText: 'Amazon', isCorrect: false},\n                {answerText: 'Microsoft', isCorrect: false},\n            ],\n        },\n        {\n            questionText: 'How many Harry Potter books are there?',\n            answerOptions: [\n                {answerText: '1', isCorrect: false},\n                {answerText: '4', isCorrect: false},\n                {answerText: '6', isCorrect: false},\n                {answerText: '7', isCorrect: true},\n            ],\n        },\n    ];\n\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [showScore, setShowScore] = useState(false);\n    const [score, setScore] = useState(0);\n\n    const handleAnswerOptionClick = (isCorrect) => {\n        if (isCorrect) {\n            setScore(score + 1);\n        }\n\n        const nextQuestion = currentQuestion + 1;\n        if (nextQuestion < questions.length) {\n            setCurrentQuestion(nextQuestion);\n        } else {\n            setShowScore(true);\n        }\n    };\n    return (\n        <div className='app'>\n            {showScore ? (\n                <div className='score-section'>\n                    You scored {score} out of {questions.length}\n                </div>\n            ) : (\n                <>\n                    <div className='question-section'>\n                        <div className='question-count'>\n                            <span>Question {currentQuestion + 1}</span>/{questions.length}\n                        </div>\n                        <div className='question-text'>{questions[currentQuestion].questionText}</div>\n                    </div>\n                    <div className='answer-section'>\n                        {questions[currentQuestion].answerOptions.map((answerOption) => (\n                            <button\n                                onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n                        ))}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}