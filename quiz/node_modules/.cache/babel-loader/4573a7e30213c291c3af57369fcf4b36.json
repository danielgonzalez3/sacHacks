{"ast":null,"code":"var _jsxFileName = \"/home/asura1/fake/quiz-app/final/src/App.js\";\nimport React, { useState } from 'react';\nexport default function App() {\n  //this creates garbage variable i\n  let i; // This initialises a request to the trivia database API\n\n  var xmlhttp = new XMLHttpRequest();\n  const url = \"https://opentdb.com/api.php?amount=50&category=23&difficulty=medium&type=multiple\";\n  var question;\n  var type;\n  var correctAnswer;\n  var fjsondata = 54;\n  var jsondata = {\n    results: new Array([54], [32], [45], [234], [234], [345], [45])\n  };\n  var incorrect1;\n  var incorrect2;\n  var incorrect3; // const questions_collection = [\n  //     {\n  //         questionText: 'hesaefasef world',\n  //         answerOptions: [\n  //             {answerText: 'New York', isCorrect: false},\n  //             {answerText: 'London', isCorrect: false},\n  //             {answerText: 'Paris', isCorrect: true},\n  //             {answerText: 'Dublin', isCorrect: false},\n  //         ],\n  //     },\n  //     {\n  //         questionText: 'What is the capital of France?',\n  //         answerOptions: [\n  //             {answerText: 'New York', isCorrect: false},\n  //             {answerText: 'London', isCorrect: false},\n  //             {answerText: 'Paris', isCorrect: true},\n  //             {answerText: 'Dublin', isCorrect: false},\n  //         ],\n  //     },\n  //     {\n  //         questionText: 'Who is CEO of Tesla?',\n  //         answerOptions: [\n  //             {answerText: 'Jeff Bezos', isCorrect: false},\n  //             {answerText: 'Elon Musk', isCorrect: true},\n  //             {answerText: 'Bill Gates', isCorrect: false},\n  //             {answerText: 'Tony Stark', isCorrect: false},\n  //         ],\n  //     },\n  //     {\n  //         questionText: 'The iPhone was created by which company?',\n  //         answerOptions: [\n  //             {answerText: 'Apple', isCorrect: true},\n  //             {answerText: 'Intel', isCorrect: false},\n  //             {answerText: 'Amazon', isCorrect: false},\n  //             {answerText: 'Microsoft', isCorrect: false},\n  //         ],\n  //     },\n  //     {\n  //         questionText: 'How many Harry Potter books are there?',\n  //         answerOptions: [\n  //             {answerText: '1', isCorrect: false},\n  //             {answerText: '4', isCorrect: false},\n  //             {answerText: '6', isCorrect: false},\n  //             {answerText: '7', isCorrect: true},\n  //         ],\n  //     },\n  // ];\n  // This requests the data\n\n  var getJSON = function (url, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'json';\n\n    xhr.onload = function () {\n      var status = xhr.status;\n\n      if (status === 200) {\n        callback(null, xhr.response);\n      } else {\n        callback(status, xhr.response);\n      }\n    };\n\n    xhr.send();\n  };\n\n  getJSON(url, function (err, data) {\n    if (err !== null) {\n      alert('Something went wrong: ' + err);\n    } else {\n      const questions_collection = [{\n        questionText: 'hesaefasef world',\n        answerOptions: [{\n          answerText: 'New York',\n          isCorrect: false\n        }, {\n          answerText: 'London',\n          isCorrect: false\n        }, {\n          answerText: 'Paris',\n          isCorrect: true\n        }, {\n          answerText: 'Dublin',\n          isCorrect: false\n        }]\n      }, {\n        questionText: 'What is the capital of France?',\n        answerOptions: [{\n          answerText: 'New York',\n          isCorrect: false\n        }, {\n          answerText: 'London',\n          isCorrect: false\n        }, {\n          answerText: 'Paris',\n          isCorrect: true\n        }, {\n          answerText: 'Dublin',\n          isCorrect: false\n        }]\n      }, {\n        questionText: 'Who is CEO of Tesla?',\n        answerOptions: [{\n          answerText: 'Jeff Bezos',\n          isCorrect: false\n        }, {\n          answerText: 'Elon Musk',\n          isCorrect: true\n        }, {\n          answerText: 'Bill Gates',\n          isCorrect: false\n        }, {\n          answerText: 'Tony Stark',\n          isCorrect: false\n        }]\n      }, {\n        questionText: 'The iPhone was created by which company?',\n        answerOptions: [{\n          answerText: 'Apple',\n          isCorrect: true\n        }, {\n          answerText: 'Intel',\n          isCorrect: false\n        }, {\n          answerText: 'Amazon',\n          isCorrect: false\n        }, {\n          answerText: 'Microsoft',\n          isCorrect: false\n        }]\n      }, {\n        questionText: 'How many Harry Potter books are there?',\n        answerOptions: [{\n          answerText: '1',\n          isCorrect: false\n        }, {\n          answerText: '4',\n          isCorrect: false\n        }, {\n          answerText: '6',\n          isCorrect: false\n        }, {\n          answerText: '7',\n          isCorrect: true\n        }]\n      }]; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n      const [currentQuestion, setCurrentQuestion] = useState(0); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n      const [showScore, setShowScore] = useState(false); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n      const [score, setScore] = useState(0);\n\n      const handleAnswerOptionClick = isCorrect => {\n        if (isCorrect) {\n          setScore(score + 1);\n        }\n\n        const nextQuestion = currentQuestion + 1;\n\n        if (nextQuestion < questions_collection.length) {\n          setCurrentQuestion(nextQuestion);\n        } else {\n          setShowScore(true);\n        }\n      };\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"app\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }\n      }, showScore ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"score-section\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 29\n        }\n      }, \"You scored \", score, \" out of \", questions_collection.length) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"question-section\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"question-count\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 41\n        }\n      }, \"Question \", currentQuestion + 1), \"/\", questions_collection.length), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"question-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 37\n        }\n      }, questions_collection[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"answer-section\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 33\n        }\n      }, questions_collection[currentQuestion].answerOptions.map(answerOption => /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => handleAnswerOptionClick(answerOption.isCorrect),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 41\n        }\n      }, answerOption.answerText)))));\n      console.log(data);\n      questions_collection[0].questionText = data.results.question;\n    }\n  });\n\n  xmlhttp.onreadystatechange = function () {\n    if (this.readyState === 4 && this.status === 200) {\n      jsondata = JSON.parse(this.responseText);\n      getData(jsondata);\n    } else {\n      throw '';\n    }\n  };\n\n  xmlhttp.open(\"GET\", url, true);\n  xmlhttp.send(); // This function is used to extract the received data\n\n  function getData(data) {\n    // This is the question:\n    question = data.results[0].question; // This is the question type eg. multiple choice\n\n    type = data.results[0].type; // This is the correct answer\n\n    correctAnswer = data.results[0].correct_answer; // These are the three incorrect answers\n\n    incorrect1 = data.results[0].incorrect_answers[0];\n    incorrect2 = data.results[0].incorrect_answers[1];\n    incorrect3 = data.results[0].incorrect_answers[2]; // randomly select answer and other options and place in array\n    // then display elements from array on the buttons\n\n    var randoms = []; // an array to store unique random numbers\n\n    var random; // loop runs four times...\n\n    for (i = 0; i < 4; i++) {\n      // generates a random number between 0 and 3\n      random = Math.floor(Math.random() * 4); // checks if random number already in array...\n\n      while (randoms.includes(random)) {\n        // generates another random number\n        random = Math.floor(Math.random() * 4);\n      } // adds random number to array\n\n\n      randoms.push(random);\n    }\n\n    var options = [];\n    console.log(randoms);\n    options[randoms[0]] = correctAnswer;\n    options[randoms[1]] = incorrect1;\n    options[randoms[2]] = incorrect2;\n    options[randoms[3]] = incorrect3;\n    console.log(options);\n  }\n\n  const questions = [{\n    questionText: 'helo world',\n    answerOptions: [{\n      answerText: 'New York',\n      isCorrect: false\n    }, {\n      answerText: 'London',\n      isCorrect: false\n    }, {\n      answerText: 'Paris',\n      isCorrect: true\n    }, {\n      answerText: 'Dublin',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'What is the capital of France?',\n    answerOptions: [{\n      answerText: 'New York',\n      isCorrect: false\n    }, {\n      answerText: 'London',\n      isCorrect: false\n    }, {\n      answerText: 'Paris',\n      isCorrect: true\n    }, {\n      answerText: 'Dublin',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'Who is CEO of Tesla?',\n    answerOptions: [{\n      answerText: 'Jeff Bezos',\n      isCorrect: false\n    }, {\n      answerText: 'Elon Musk',\n      isCorrect: true\n    }, {\n      answerText: 'Bill Gates',\n      isCorrect: false\n    }, {\n      answerText: 'Tony Stark',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'The iPhone was created by which company?',\n    answerOptions: [{\n      answerText: 'Apple',\n      isCorrect: true\n    }, {\n      answerText: 'Intel',\n      isCorrect: false\n    }, {\n      answerText: 'Amazon',\n      isCorrect: false\n    }, {\n      answerText: 'Microsoft',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'How many Harry Potter books are there?',\n    answerOptions: [{\n      answerText: '1',\n      isCorrect: false\n    }, {\n      answerText: '4',\n      isCorrect: false\n    }, {\n      answerText: '6',\n      isCorrect: false\n    }, {\n      answerText: '7',\n      isCorrect: true\n    }]\n  }];\n  questions[0].questionText = jsondata.results[0]; //     const [currentQuestion, setCurrentQuestion] = useState(0);\n  //     const [showScore, setShowScore] = useState(false);\n  //     const [score, setScore] = useState(0);\n  //\n  //     const handleAnswerOptionClick = (isCorrect) => {\n  //         if (isCorrect) {\n  //             setScore(score + 1);\n  //         }\n  //\n  //         const nextQuestion = currentQuestion + 1;\n  //         if (nextQuestion < questions_collection.length) {\n  //             setCurrentQuestion(nextQuestion);\n  //         } else {\n  //             setShowScore(true);\n  //         }\n  //     };\n  //     return (\n  //         <div className='app'>\n  //             {showScore ? (\n  //                 <div className='score-section'>\n  //                     You scored {score} out of {questions_collection.length}\n  //                 </div>\n  //             ) : (\n  //                 <>\n  //                     <div className='question-section'>\n  //                         <div className='question-count'>\n  //                             <span>Question {currentQuestion + 1}</span>/{questions_collection.length}\n  //                         </div>\n  //                         <div className='question-text'>{questions_collection[currentQuestion].questionText}</div>\n  //                     </div>\n  //                     <div className='answer-section'>\n  //                         {questions_collection[currentQuestion].answerOptions.map((answerOption) => (\n  //                             <button\n  //                                 onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n  //                         ))}\n  //                     </div>\n  //                 </>\n  //             )}\n  //         </div>\n  //     );\n}","map":{"version":3,"sources":["/home/asura1/fake/quiz-app/final/src/App.js"],"names":["React","useState","App","i","xmlhttp","XMLHttpRequest","url","question","type","correctAnswer","fjsondata","jsondata","results","Array","incorrect1","incorrect2","incorrect3","getJSON","callback","xhr","open","responseType","onload","status","response","send","err","data","alert","questions_collection","questionText","answerOptions","answerText","isCorrect","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","handleAnswerOptionClick","nextQuestion","length","map","answerOption","console","log","onreadystatechange","readyState","JSON","parse","responseText","getData","correct_answer","incorrect_answers","randoms","random","Math","floor","includes","push","options","questions"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\n\nexport default function App() {\n    //this creates garbage variable i\n    let i;\n    // This initialises a request to the trivia database API\n    var xmlhttp = new XMLHttpRequest();\n    const url = \"https://opentdb.com/api.php?amount=50&category=23&difficulty=medium&type=multiple\";\n    var question;\n    var type;\n    var correctAnswer;\n    var fjsondata = 54;\n    var jsondata = {results: new Array([54], [32], [45], [234], [234], [345], [45])};\n    var incorrect1;\n    var incorrect2;\n    var incorrect3;\n    // const questions_collection = [\n    //     {\n    //         questionText: 'hesaefasef world',\n    //         answerOptions: [\n    //             {answerText: 'New York', isCorrect: false},\n    //             {answerText: 'London', isCorrect: false},\n    //             {answerText: 'Paris', isCorrect: true},\n    //             {answerText: 'Dublin', isCorrect: false},\n    //         ],\n    //     },\n    //     {\n    //         questionText: 'What is the capital of France?',\n    //         answerOptions: [\n    //             {answerText: 'New York', isCorrect: false},\n    //             {answerText: 'London', isCorrect: false},\n    //             {answerText: 'Paris', isCorrect: true},\n    //             {answerText: 'Dublin', isCorrect: false},\n    //         ],\n    //     },\n    //     {\n    //         questionText: 'Who is CEO of Tesla?',\n    //         answerOptions: [\n    //             {answerText: 'Jeff Bezos', isCorrect: false},\n    //             {answerText: 'Elon Musk', isCorrect: true},\n    //             {answerText: 'Bill Gates', isCorrect: false},\n    //             {answerText: 'Tony Stark', isCorrect: false},\n    //         ],\n    //     },\n    //     {\n    //         questionText: 'The iPhone was created by which company?',\n    //         answerOptions: [\n    //             {answerText: 'Apple', isCorrect: true},\n    //             {answerText: 'Intel', isCorrect: false},\n    //             {answerText: 'Amazon', isCorrect: false},\n    //             {answerText: 'Microsoft', isCorrect: false},\n    //         ],\n    //     },\n    //     {\n    //         questionText: 'How many Harry Potter books are there?',\n    //         answerOptions: [\n    //             {answerText: '1', isCorrect: false},\n    //             {answerText: '4', isCorrect: false},\n    //             {answerText: '6', isCorrect: false},\n    //             {answerText: '7', isCorrect: true},\n    //         ],\n    //     },\n    // ];\n// This requests the data\n    var getJSON = function (url, callback) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'json';\n        xhr.onload = function () {\n            var status = xhr.status;\n            if (status === 200) {\n                callback(null, xhr.response);\n            } else {\n                callback(status, xhr.response);\n            }\n        };\n        xhr.send();\n    };\n    getJSON(url,\n        function (err, data) {\n            if (err !== null) {\n                alert('Something went wrong: ' + err);\n            } else {\n\n                const questions_collection = [\n                    {\n                        questionText: 'hesaefasef world',\n                        answerOptions: [\n                            {answerText: 'New York', isCorrect: false},\n                            {answerText: 'London', isCorrect: false},\n                            {answerText: 'Paris', isCorrect: true},\n                            {answerText: 'Dublin', isCorrect: false},\n                        ],\n                    },\n                    {\n                        questionText: 'What is the capital of France?',\n                        answerOptions: [\n                            {answerText: 'New York', isCorrect: false},\n                            {answerText: 'London', isCorrect: false},\n                            {answerText: 'Paris', isCorrect: true},\n                            {answerText: 'Dublin', isCorrect: false},\n                        ],\n                    },\n                    {\n                        questionText: 'Who is CEO of Tesla?',\n                        answerOptions: [\n                            {answerText: 'Jeff Bezos', isCorrect: false},\n                            {answerText: 'Elon Musk', isCorrect: true},\n                            {answerText: 'Bill Gates', isCorrect: false},\n                            {answerText: 'Tony Stark', isCorrect: false},\n                        ],\n                    },\n                    {\n                        questionText: 'The iPhone was created by which company?',\n                        answerOptions: [\n                            {answerText: 'Apple', isCorrect: true},\n                            {answerText: 'Intel', isCorrect: false},\n                            {answerText: 'Amazon', isCorrect: false},\n                            {answerText: 'Microsoft', isCorrect: false},\n                        ],\n                    },\n                    {\n                        questionText: 'How many Harry Potter books are there?',\n                        answerOptions: [\n                            {answerText: '1', isCorrect: false},\n                            {answerText: '4', isCorrect: false},\n                            {answerText: '6', isCorrect: false},\n                            {answerText: '7', isCorrect: true},\n                        ],\n                    },\n                ];\n                // eslint-disable-next-line react-hooks/rules-of-hooks\n                const [currentQuestion, setCurrentQuestion] = useState(0);\n                // eslint-disable-next-line react-hooks/rules-of-hooks\n                const [showScore, setShowScore] = useState(false);\n                // eslint-disable-next-line react-hooks/rules-of-hooks\n                const [score, setScore] = useState(0);\n\n                const handleAnswerOptionClick = (isCorrect) => {\n                    if (isCorrect) {\n                        setScore(score + 1);\n                    }\n\n                    const nextQuestion = currentQuestion + 1;\n                    if (nextQuestion < questions_collection.length) {\n                        setCurrentQuestion(nextQuestion);\n                    } else {\n                        setShowScore(true);\n                    }\n                };\n                return (\n                    <div className='app'>\n                        {showScore ? (\n                            <div className='score-section'>\n                                You scored {score} out of {questions_collection.length}\n                            </div>\n                        ) : (\n                            <>\n                                <div className='question-section'>\n                                    <div className='question-count'>\n                                        <span>Question {currentQuestion + 1}</span>/{questions_collection.length}\n                                    </div>\n                                    <div\n                                        className='question-text'>{questions_collection[currentQuestion].questionText}</div>\n                                </div>\n                                <div className='answer-section'>\n                                    {questions_collection[currentQuestion].answerOptions.map((answerOption) => (\n                                        <button\n                                            onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n                                    ))}\n                                </div>\n                            </>\n                        )}\n                    </div>\n                );\n                console.log(data);\n                questions_collection[0].questionText = data.results.question;\n            }\n        });\n\n    xmlhttp.onreadystatechange = function () {\n        if (this.readyState === 4 && this.status === 200) {\n            jsondata = JSON.parse(this.responseText);\n            getData(jsondata);\n        } else {\n            throw '';\n        }\n    };\n    xmlhttp.open(\"GET\", url, true);\n    xmlhttp.send();\n\n    // This function is used to extract the received data\n    function getData(data) {\n        // This is the question:\n        question = data.results[0].question;\n        // This is the question type eg. multiple choice\n        type = data.results[0].type;\n        // This is the correct answer\n        correctAnswer = data.results[0].correct_answer;\n        // These are the three incorrect answers\n        incorrect1 = data.results[0].incorrect_answers[0];\n        incorrect2 = data.results[0].incorrect_answers[1];\n        incorrect3 = data.results[0].incorrect_answers[2];\n\n        // randomly select answer and other options and place in array\n        // then display elements from array on the buttons\n\n        var randoms = []; // an array to store unique random numbers\n        var random;\n\n        // loop runs four times...\n        for (i = 0; i < 4; i++) {\n            // generates a random number between 0 and 3\n            random = Math.floor(Math.random() * 4);\n            // checks if random number already in array...\n            while (randoms.includes(random)) {\n                // generates another random number\n                random = Math.floor(Math.random() * 4);\n            }\n            // adds random number to array\n            randoms.push(random);\n        }\n\n\n        var options = [];\n        console.log(randoms);\n        options[randoms[0]] = correctAnswer;\n        options[randoms[1]] = incorrect1;\n        options[randoms[2]] = incorrect2;\n        options[randoms[3]] = incorrect3;\n\n        console.log(options);\n    }\n\n    const questions = [\n        {\n            questionText: 'helo world',\n            answerOptions: [\n                {answerText: 'New York', isCorrect: false},\n                {answerText: 'London', isCorrect: false},\n                {answerText: 'Paris', isCorrect: true},\n                {answerText: 'Dublin', isCorrect: false},\n            ],\n        },\n        {\n            questionText: 'What is the capital of France?',\n            answerOptions: [\n                {answerText: 'New York', isCorrect: false},\n                {answerText: 'London', isCorrect: false},\n                {answerText: 'Paris', isCorrect: true},\n                {answerText: 'Dublin', isCorrect: false},\n            ],\n        },\n        {\n            questionText: 'Who is CEO of Tesla?',\n            answerOptions: [\n                {answerText: 'Jeff Bezos', isCorrect: false},\n                {answerText: 'Elon Musk', isCorrect: true},\n                {answerText: 'Bill Gates', isCorrect: false},\n                {answerText: 'Tony Stark', isCorrect: false},\n            ],\n        },\n        {\n            questionText: 'The iPhone was created by which company?',\n            answerOptions: [\n                {answerText: 'Apple', isCorrect: true},\n                {answerText: 'Intel', isCorrect: false},\n                {answerText: 'Amazon', isCorrect: false},\n                {answerText: 'Microsoft', isCorrect: false},\n            ],\n        },\n        {\n            questionText: 'How many Harry Potter books are there?',\n            answerOptions: [\n                {answerText: '1', isCorrect: false},\n                {answerText: '4', isCorrect: false},\n                {answerText: '6', isCorrect: false},\n                {answerText: '7', isCorrect: true},\n            ],\n        },\n    ];\n    questions[0].questionText = jsondata.results[0]\n\n//     const [currentQuestion, setCurrentQuestion] = useState(0);\n//     const [showScore, setShowScore] = useState(false);\n//     const [score, setScore] = useState(0);\n//\n//     const handleAnswerOptionClick = (isCorrect) => {\n//         if (isCorrect) {\n//             setScore(score + 1);\n//         }\n//\n//         const nextQuestion = currentQuestion + 1;\n//         if (nextQuestion < questions_collection.length) {\n//             setCurrentQuestion(nextQuestion);\n//         } else {\n//             setShowScore(true);\n//         }\n//     };\n//     return (\n//         <div className='app'>\n//             {showScore ? (\n//                 <div className='score-section'>\n//                     You scored {score} out of {questions_collection.length}\n//                 </div>\n//             ) : (\n//                 <>\n//                     <div className='question-section'>\n//                         <div className='question-count'>\n//                             <span>Question {currentQuestion + 1}</span>/{questions_collection.length}\n//                         </div>\n//                         <div className='question-text'>{questions_collection[currentQuestion].questionText}</div>\n//                     </div>\n//                     <div className='answer-section'>\n//                         {questions_collection[currentQuestion].answerOptions.map((answerOption) => (\n//                             <button\n//                                 onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n//                         ))}\n//                     </div>\n//                 </>\n//             )}\n//         </div>\n//     );\n}\n"]},"metadata":{},"sourceType":"module"}