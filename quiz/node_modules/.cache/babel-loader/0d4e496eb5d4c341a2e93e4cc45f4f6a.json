{"ast":null,"code":"const axios = require('axios');\n\nconst methods = require('./methods.js');\n\n;\n/**\r\n * Retrieves random trivia from the Open Trivia DB\r\n * @param {{amount: Number, difficulty: String, category: String, type: String, token: String}} options Options to get trivia questions with. amount: integer amount of questions to retrieve. difficulty: easy, medium, or hard. category: category of questions. type: multiple or boolean. token: session token to prevent duplicate trivia.\r\n * @returns {Promise<JSON>}\r\n */\n\nexports.getTrivia = async function (options = {}) {\n  var amount = options.amount !== undefined ? options.amount : 1;\n  var difficulty = options.difficulty !== undefined ? options.difficulty : 'medium';\n  var category = options.category !== undefined ? options.category : 'any';\n  var type = options.type !== undefined ? options.type : 'multiple';\n  var token = options.token !== undefined ? options.token : '';\n  return new Promise(async (resolve, reject) => {\n    try {\n      const maxCategories = await axios.get('https://opentdb.com/api_category.php');\n      const cateID = methods.getTriviaCategoryID(category, maxCategories.data.trivia_categories[maxCategories.data.trivia_categories.length - 1].id);\n      const pamount = methods.getTriviaAmount(amount);\n      const ptype = methods.getTriviaType(type);\n      const pdifficulty = methods.getTriviaDifficulty(difficulty);\n      var finalParams = {\n        amount: pamount\n      };\n\n      if (cateID !== '') {\n        finalParams.category = cateID;\n      }\n\n      if (pdifficulty !== '') {\n        finalParams.difficulty = pdifficulty;\n      }\n\n      if (ptype !== '') {\n        finalParams.type = ptype;\n      }\n\n      if (token !== '') {\n        finalParams.token = token;\n      }\n\n      const result = await axios.get('https://opentdb.com/api.php', {\n        params: finalParams\n      });\n\n      if (result.data.response_code !== 0) {\n        reject(new Error('Response code ' + result.data.response_code + ': ' + methods.getReponseError(result.data.response_code)));\n      } else {\n        var filteredResult = JSON.parse(JSON.stringify(result.data.results).replace(/&quot;/g, '\\\\\"').replace(/&#039;/g, \"'\").replace(/&amp;/g, '&').replace(/&acute;/g, '`').replace(/&eacute;/g, 'é').replace(/&oacute;/g, 'ó').replace(/&pound;/g, '£').replace(/&aacute;/g, 'á').replace(/&Aacute;/g, 'Á').replace(/&ntilde;/g, 'ñ').replace(/&rdquo;/g, '\\\\\"').replace(/&ouml;/g, 'ö'));\n        resolve(filteredResult);\n      }\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n/**\r\n * Retrieves a session token\r\n * @returns {Promise<String>} Token\r\n */\n\n\nexports.getToken = async function () {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const result = await axios.get('https://opentdb.com/api_token.php?command=request');\n\n      if (result.data.response_code !== 0) {\n        reject(new Error('Response code ' + result.data.response_code + ': ' + result.data.response_message));\n      } else {\n        resolve(result.data.token);\n      }\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n/**\r\n * Resets a session token\r\n * @param {String} token Token to reset session for.\r\n * @returns {Promise<Boolean>} Success\r\n */\n\n\nexports.resetToken = async function (token) {\n  const result = await axios.get(`https://opentdb.com/api_token.php?command=reset&token=${token}`);\n\n  if (result.data.response_code !== 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n/**\r\n * Returns all categories along with their ID\r\n * @returns {Promise<Object>}\r\n */\n\n\nexports.getCategories = async function () {\n  const results = await axios.get('https://opentdb.com/api_category.php');\n  return results.data.trivia_categories;\n};\n/**\r\n * Returns the total question account for a category\r\n * @param {String} category Category to get count for.\r\n * @returns {Promse<Object>}\r\n */\n\n\nexports.getQuestionCount = function (category) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const maxCategories = await axios.get('https://opentdb.com/api_category.php');\n      const cateID = methods.getTriviaCategoryID(category, maxCategories.data.trivia_categories[maxCategories.data.trivia_categories.length - 1].id);\n      const questionCount = await axios.get(`https://opentdb.com/api_count.php?category=${cateID}`);\n      resolve(questionCount.data.category_question_count);\n    } catch (err) {\n      reject(err);\n    }\n  });\n};","map":{"version":3,"sources":["/home/asura1/fake/quiz-app/final/node_modules/opentdb-api/index.js"],"names":["axios","require","methods","exports","getTrivia","options","amount","undefined","difficulty","category","type","token","Promise","resolve","reject","maxCategories","get","cateID","getTriviaCategoryID","data","trivia_categories","length","id","pamount","getTriviaAmount","ptype","getTriviaType","pdifficulty","getTriviaDifficulty","finalParams","result","params","response_code","Error","getReponseError","filteredResult","JSON","parse","stringify","results","replace","err","getToken","response_message","resetToken","getCategories","getQuestionCount","questionCount","category_question_count"],"mappings":"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","sourcesContent":["const axios   = require('axios');\r\nconst methods = require('./methods.js');;\r\n\r\n/**\r\n * Retrieves random trivia from the Open Trivia DB\r\n * @param {{amount: Number, difficulty: String, category: String, type: String, token: String}} options Options to get trivia questions with. amount: integer amount of questions to retrieve. difficulty: easy, medium, or hard. category: category of questions. type: multiple or boolean. token: session token to prevent duplicate trivia.\r\n * @returns {Promise<JSON>}\r\n */\r\nexports.getTrivia = async function (options = {}){\r\n    var amount     = options.amount !== undefined ? options.amount : 1;\r\n    var difficulty = options.difficulty !== undefined ? options.difficulty : 'medium';\r\n    var category   = options.category !== undefined ? options.category : 'any';\r\n    var type       = options.type !== undefined ? options.type : 'multiple';\r\n    var token      = options.token !== undefined ? options.token : '';\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n        try{\r\n            const maxCategories = await axios.get('https://opentdb.com/api_category.php');\r\n            const cateID      = methods.getTriviaCategoryID(category, maxCategories.data.trivia_categories[maxCategories.data.trivia_categories.length - 1].id);\r\n            const pamount     = methods.getTriviaAmount(amount);\r\n            const ptype       = methods.getTriviaType(type);\r\n            const pdifficulty = methods.getTriviaDifficulty(difficulty);\r\n\r\n            var finalParams = {\r\n                amount: pamount\r\n            }\r\n\r\n            if(cateID !== ''){\r\n                finalParams.category = cateID\r\n            }\r\n            if(pdifficulty !== ''){\r\n                finalParams.difficulty = pdifficulty\r\n            }\r\n            if(ptype !== ''){\r\n                finalParams.type = ptype\r\n            }\r\n            if(token !== ''){\r\n                finalParams.token = token\r\n            }\r\n            \r\n            const result = await axios.get('https://opentdb.com/api.php', {\r\n                params: finalParams\r\n            });\r\n\r\n            if(result.data.response_code !== 0){\r\n                reject(new Error('Response code ' + result.data.response_code + ': ' + methods.getReponseError(result.data.response_code)));\r\n            }\r\n            else{\r\n                var filteredResult = JSON.parse(JSON.stringify(result.data.results)\r\n                .replace(/&quot;/g, '\\\\\"')\r\n                .replace(/&#039;/g, \"'\")\r\n                .replace(/&amp;/g, '&')\r\n                .replace(/&acute;/g, '`')\r\n                .replace(/&eacute;/g, 'é')\r\n                .replace(/&oacute;/g, 'ó')\r\n                .replace(/&pound;/g, '£')\r\n                .replace(/&aacute;/g, 'á')\r\n                .replace(/&Aacute;/g, 'Á')\r\n                .replace(/&ntilde;/g, 'ñ')\r\n                .replace(/&rdquo;/g, '\\\\\"')\r\n                .replace(/&ouml;/g, 'ö')\r\n                );\r\n                resolve(filteredResult);\r\n            }\r\n\r\n        }\r\n        catch(err){\r\n            reject(err);\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Retrieves a session token\r\n * @returns {Promise<String>} Token\r\n */\r\nexports.getToken  = async function(){\r\n    return new Promise(async (resolve, reject) => {\r\n        try{\r\n            const result = await axios.get('https://opentdb.com/api_token.php?command=request');\r\n\r\n            if(result.data.response_code !== 0){\r\n                reject(new Error('Response code ' + result.data.response_code + ': ' + result.data.response_message));\r\n            }\r\n            else{\r\n                resolve(result.data.token);\r\n            }\r\n        }\r\n        catch(err){\r\n            reject(err);\r\n        }\r\n    })\r\n}\r\n\r\n\r\n/**\r\n * Resets a session token\r\n * @param {String} token Token to reset session for.\r\n * @returns {Promise<Boolean>} Success\r\n */\r\nexports.resetToken = async function(token){\r\n    const result = await axios.get(`https://opentdb.com/api_token.php?command=reset&token=${token}`)\r\n\r\n    if(result.data.response_code !== 0){\r\n        return false;\r\n    }\r\n    else{\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Returns all categories along with their ID\r\n * @returns {Promise<Object>}\r\n */\r\nexports.getCategories = async function(){\r\n    const results = await axios.get('https://opentdb.com/api_category.php');\r\n\r\n    return results.data.trivia_categories;\r\n}\r\n\r\n\r\n/**\r\n * Returns the total question account for a category\r\n * @param {String} category Category to get count for.\r\n * @returns {Promse<Object>}\r\n */\r\nexports.getQuestionCount = function(category){\r\n    return new Promise(async (resolve, reject) => {\r\n        try{\r\n            const maxCategories = await axios.get('https://opentdb.com/api_category.php');\r\n            const cateID        = methods.getTriviaCategoryID(category, maxCategories.data.trivia_categories[maxCategories.data.trivia_categories.length - 1].id);\r\n\r\n            const questionCount = await axios.get(`https://opentdb.com/api_count.php?category=${cateID}`);\r\n\r\n            resolve(questionCount.data.category_question_count);\r\n        }\r\n        catch(err){\r\n            reject(err);\r\n        }\r\n    });\r\n}"]},"metadata":{},"sourceType":"script"}